package utilities;

import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.StopWatch;
import org.openqa.selenium.By;
import org.openqa.selenium.Capabilities;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.SearchContext;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.CommandExecutor;
import org.openqa.selenium.remote.DriverCommand;
import org.openqa.selenium.remote.RemoteExecuteMethod;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.collections.Lists;

public class RemoteWebDriverExtended extends RemoteWebDriver {

	Context prevContext = Context.WEBVIEW;
	Context requestContext = Context.WEBVIEW;

	public enum Context {
		NATIVE_APP, WEBVIEW, VISUAL
	}

	private Capabilities allCapabilities;

	/**
	 * @param remoteAddress
	 * @param desiredCapabilities
	 */
	public RemoteWebDriverExtended(URL remoteAddress, Capabilities desiredCapabilities) {
		super(remoteAddress, desiredCapabilities);
		allCapabilities = super.getCapabilities();
	}

	public void setAllCapabilities(Capabilities caps) {
		allCapabilities = caps;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.openqa.selenium.remote.RemoteWebDriver#getCapabilities()
	 */
	@Override
	public Capabilities getCapabilities() {
		return allCapabilities;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.openqa.selenium.remote.RemoteWebDriver#executeScript(java.lang.
	 * String, java.lang.Object[])
	 */
	@Override
	public Object executeScript(String script, Object... args) {
		String params = StringUtils.join(Lists.newArrayList(args), "\n");
		return super.executeScript(script, args);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.openqa.selenium.remote.RemoteWebDriver#get(java.lang.String)
	 */
	@Override
	public void get(String url) {
		super.get(url);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.openqa.selenium.remote.RemoteWebDriver#findElement(org.openqa.
	 * selenium.By)
	 */
	@Override
	public WebElement findElement(By by) {
		StopWatch timer = new StopWatch();
		timer.start();
		try {
			WebElement element = super.findElement(by);
			return element;
		} catch (Exception e) {
			throw e;
		}
	}

	private String getTimerString(StopWatch timer) {
		return "(" + TimeUnit.SECONDS.convert(timer.getNanoTime(), TimeUnit.NANOSECONDS) + "s) ";
	}

	@Override
	protected WebElement findElement(String by, String using) {
		List<WebElement> allElements = findElements(by, using);
		if (allElements == null || allElements.isEmpty())
			throw new NoSuchElementException("Cannot locate an element using " + toString());
		return allElements.get(0);
	}

	/**
	 * Switch the {@link RemoteWebDriver} driver context. A list with possible
	 * contexts can be generated by the
	 * {@link #getCurrentContextHandle(RemoteWebDriver)} method. To check the
	 * current context, use the
	 * {@link #getCurrentContextHandle(RemoteWebDriver)} method.
	 * 
	 * @param driver
	 *            The context of the passed driver will be changed
	 * @param context
	 *            The context to change to
	 */
	public boolean switchToContext(Context context) {
		try {
			RemoteExecuteMethod executeMethod = new RemoteExecuteMethod(this);
			Map<String, String> params = new HashMap<String, String>();
			params.put("name", context.name());
			executeMethod.execute(DriverCommand.SWITCH_TO_CONTEXT, params);
			return true;
		} catch (Exception e) {
			logThread("Could not switch context");
		}
		return false;
	}

	/**
	 * Gets the {@link String} value of the current context of the driver. In
	 * order to change the current context, use the
	 * {@link #switchToContext(RemoteWebDriver, String)} method.
	 * 
	 * @param driver
	 *            The driver to get the context from.
	 * @return {@link String} value of the current context.
	 */
	public Context getCurrentContextHandle() {
		try {
			RemoteExecuteMethod executeMethod = new RemoteExecuteMethod(this);
			String context = (String) executeMethod.execute(DriverCommand.GET_CURRENT_CONTEXT_HANDLE, null);
			if (context.toLowerCase().contains("webview"))
				return Context.WEBVIEW;
			else if (context.toLowerCase().contains("native"))
				return Context.NATIVE_APP;
			else if (context.toLowerCase().contains("visual"))
				return Context.VISUAL;
		} catch (Exception e) {
			logThread("Could not get context!");
		}
		return Context.WEBVIEW;
	}

	private void logThread(String msg) {
		// if (logMsgs)
		System.out.println("PopUpUtils: " + msg);
	}

}